{"version":3,"sources":["components/AllTasks.js","components/TaskDetails.js","App.js","serviceWorker.js","index.js"],"names":["list_of_tasks","list_of_tasks_objects","id","task","due","isComplete","AllTasks","props","className","map","oneTask","i","key","oneTaskObj","onClick","event","taskObj","console","log","infoToParent","showTask","TaskDetails","obj_details","alert","JSON","stringify","App","useState","stateObj","setStateObj","child_data_obj","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAEMA,G,MAAgB,CACpB,aAAc,eAAgB,gBAAiB,eAG3CC,EAAwB,CAC5B,CAAEC,GAAI,EAAGC,KAAM,aAAcC,IAAK,aAAcC,YAAY,GAC5D,CAAEH,GAAI,EAAGC,KAAM,eAAiBC,IAAK,aAAcC,YAAY,GAC/D,CAAEH,GAAI,EAAGC,KAAM,gBAAkBC,IAAK,aAAcC,YAAY,GAChE,CAAEH,GAAI,EAAGC,KAAM,aAAeC,IAAK,aAAcC,YAAY,IAqEhDC,EAjEE,SAAAC,GAaf,OACE,yBAAKC,UAAU,oBAEX,kCAEI,4CAEA,kEAEA,qCAEER,EAAcS,KAAK,SAACC,EAASC,GAAV,OACjB,0BAAMC,IAAKD,GAAX,IAAgBD,EAAhB,UAKFV,EAAcS,KAAK,SAACC,EAASC,GAAV,OACjB,uBAAGC,IAAKD,GAAR,QAAiBA,EAAjB,OAAwBD,EAAxB,QAIJ,4BAEIV,EAAcS,KAAK,SAAEN,EAAMQ,GAAR,OACjB,wBAAIC,IAAKD,GAAT,IAAeX,EAAcW,GAA7B,SAKN,6BAEA,+CAEEV,EAAsBQ,KAAM,SAACI,EAAYF,GAAb,OAE1B,uBAAGC,IAAKD,GAAR,IAAaE,EAAWX,GAAxB,KAA8BW,EAAWV,KACvC,4BAAQW,QAAU,SAAAC,GAAK,OA/CtB,SAACJ,EAAGK,EAASD,GAC5BE,QAAQC,IAAI,KAAKP,EAAG,KAAM,OAAOK,GACjCC,QAAQC,IAAIjB,EAAsBU,IAClCM,QAAQC,IAAI,gEACZD,QAAQC,IAAIH,GACZR,EAAMY,aAAa,CAACH,IA0CqBI,CAAST,EAAGE,EAAYE,KAAnD,sBCXHM,EAlDK,SAACd,GAQnB,MAN0B,KAAtBA,EAAMe,aACRL,QAAQC,IAAI,iCACdD,QAAQC,IAAIX,EAAMe,YAAY,IAC9BC,MAAMC,KAAKC,UAAUlB,EAAMe,YAAY,GAAI,KAAM,IAI/C,yBAAKd,UAAU,uBAEX,kCACI,uDAEA,4BAcuC,KAApCD,EAAMe,YAAY,GAAGjB,WACpB,+DAEA,oCACE,0CAAiBE,EAAMe,YAAY,GAAGpB,GAAtC,KACA,0CAAiBK,EAAMe,YAAY,GAAGnB,KAAtC,KACA,0CAAiBI,EAAMe,YAAY,GAAGlB,IAAtC,KACA,wBAAII,UAAU,cAAd,cAAwCgB,KAAKC,UAAUlB,EAAMe,YAAY,GAAGjB,YAA5E,KACA,gCAAOE,EAAMe,YAAY,GAAGjB,WAAa,QAAU,UAAnD,UCjCdiB,EAAc,CAAC,CACjBpB,GAAI,GACJC,KAAM,GACNC,IAAK,GACLC,WAAY,KA6BCqB,MAzBf,WAAgB,IAAD,EAEmBC,mBAAUL,GAF7B,mBAENM,EAFM,KAEIC,EAFJ,KAWb,OACE,yBAAKrB,UAAU,WAEb,kBAAC,EAAD,CAAUW,aAVQ,SAAAW,GACpBb,QAAQC,IAAI,0BACZD,QAAQC,IAAKY,GACbD,EAAaC,MASX,6BAGA,kBAAC,EAAD,CAAaR,YAAcM,MCrBbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.342c8b95.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst list_of_tasks = [\r\n  'Do laundry', 'Walk the dog', 'Watch Netflix', 'Clean room'\r\n];\r\n\r\nconst list_of_tasks_objects = [\r\n  { id: 1, task: 'Do laundry', due: '2020-03-16', isComplete: true}, \r\n  { id: 2, task: 'Walk the dog' , due: '2020-03-17', isComplete: false},\r\n  { id: 3, task: 'Watch Netflix' , due: '2020-03-18', isComplete: false},\r\n  { id: 4, task: 'Clean room' , due: '2020-03-19', isComplete: false}\r\n];\r\n\r\n\r\nconst AllTasks = props => {\r\n\r\n\r\n  const showTask = (i, taskObj, event) => {\r\n    console.log('i=',i, '\\n', 'obj=',taskObj);\r\n    console.log(list_of_tasks_objects[i]);\r\n    console.log('*** The list_of_tasks_objects[i] = taskObj argument passed !');\r\n    console.log(event);\r\n    props.infoToParent([taskObj]);\r\n\r\n  }// *** showTask => function ***\r\n\r\n  \r\n  return (\r\n    <div className=\"top_div_AllTasks\">\r\n      \r\n        <fieldset>\r\n\r\n            <legend>All Task</legend>\r\n\r\n            <h4>List of strings (3 different ways)</h4>\r\n            \r\n            <span> / </span>\r\n            {\r\n              list_of_tasks.map( (oneTask, i) =>\r\n                <span key={i}> {oneTask} / </span>\r\n              )\r\n            }\r\n\r\n            {\r\n              list_of_tasks.map( (oneTask, i) =>\r\n                <p key={i}> key={i} -> {oneTask} </p>\r\n              )\r\n            }  \r\n\r\n            <ol>\r\n              {\r\n                list_of_tasks.map( ( task, i) =>\r\n                  <li key={i}> { list_of_tasks[i] } </li>\r\n                )\r\n              }\r\n            </ol>\r\n            \r\n            <hr />\r\n\r\n            <h4>List of objects</h4>\r\n            {\r\n              list_of_tasks_objects.map ( (oneTaskObj, i) =>\r\n             \r\n                <p key={i}> {oneTaskObj.id}. {oneTaskObj.task} \r\n                  <button onClick={ event => showTask(i, oneTaskObj, event) }> Details > </button>\r\n                </p>\r\n             \r\n              )\r\n            }\r\n\r\n\r\n        </fieldset>\r\n\r\n\r\n    </div>\r\n  );\r\n}// ** AllTasks component ********************************************\r\n\r\n\r\nexport default AllTasks;\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst TaskDetails = (props) => {\r\n\r\n  if (props.obj_details === \"\")\r\n    console.log('===>>> tested ok empty string');\r\n  console.log(props.obj_details[0]);\r\n  alert(JSON.stringify(props.obj_details[0], null, 4));\r\n\r\n  \r\n  return (\r\n    <div className=\"top_div_TaskDetails\">\r\n\r\n        <fieldset>\r\n            <legend> Show Task Details </legend>\r\n            \r\n            <ul>\r\n              {/* {\r\n                props.obj_details.map( ( task ) =>\r\n                  <>\r\n                    <li>Id: {task.id} </li>\r\n                    <li>Task:  {task.task} </li>\r\n                    <li>Due:  {task.due} </li>\r\n                    <li>Completed: { JSON.stringify(task.isComplete) } </li>\r\n                  </> \r\n                )\r\n              } */}\r\n\r\n              {\r\n\r\n              (props.obj_details[0].isComplete === '') ? \r\n                <h2>Select a Task Details button ! </h2> \r\n              : \r\n                <>\r\n                  <li>Id:        { props.obj_details[0].id   } </li>\r\n                  <li>Task:      { props.obj_details[0].task } </li>\r\n                  <li>Due:       { props.obj_details[0].due  } </li>\r\n                  <li className='li_colored'>Completed: { JSON.stringify(props.obj_details[0].isComplete) } </li>\r\n                  <h2> { props.obj_details[0].isComplete ? \"Yes !\" : \"Not yet\" } </h2>\r\n                </>\r\n              }\r\n               \r\n            </ul>\r\n            \r\n        </fieldset>\r\n      \r\n    \r\n    </div>\r\n  );\r\n}// ** TaskDetails component *************************************************\r\n\r\n\r\nexport default TaskDetails;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport AllTasks from './components/AllTasks';\nimport TaskDetails from './components/TaskDetails';\n\n\nlet obj_details = [{\n  id: '', \n  task: '', \n  due: '', \n  isComplete: ''\n}]\n\n\nfunction App() {\n\n  const [stateObj, setStateObj] = useState( obj_details );\n\n  const infoFromChild = child_data_obj => {\n    console.log('** In App component **');\n    console.log( child_data_obj );\n    setStateObj( child_data_obj );\n  }// ** infoFromChild => function ***********************************\n\n\n  return (\n    <div className=\"top_div\">\n      \n      <AllTasks infoToParent = {infoFromChild} />\n\n      <br />\n\n      {/* <TaskDetails obj_details={ obj_details }/> */}\n      <TaskDetails obj_details={ stateObj }/>\n\n    </div>\n  );\n}// ** App component *************************************************\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}